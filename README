Python Client for UIDAI authentication service
=============================================

Status
------

1. Skeleton code (not production-ready) 
2. Simplest possible XSD-compliant XML is generated for request and response 
3. Incoming XML can be validated and 'objectified for both 
4. Outgoing XML can be signed (and verified using p12 file)
5. Has support for generation of Pid XML (biometric and demographic)
6. Session key automatically generated and 
7. Encryption of session key using UID certificate
(and encryption/decryption testing using public.p12) 
8. Support for license key in the config file

To do
-----

1. Look through the GeoAmida implementation to see the differences
in implementation - mostly done 
2. Figure out how to invoke xmlDocDumpFormatMemory instead of 
lxml.tostring and doc.formatDump. Not sure for now. Not sure 
that it matters. 
3. Use the objectified xml to populate internal state 
4. Look through the spec for validation rules beyond what the 
XSD is providing (e.g., sanity checks) 
5. Look into integration with biometrics
6. Fix fixtures/call_parameters.json 
7. Add support for session key generation and extraction of 
certificate information - done
8. Make this into a module 

Running 
-------

$ sudo apt-get install python-dev libxml2-dev libxslt1-dev libxmlsec1 libxmlsec1-dev 
$ sudo pip install lxml 
$ sudo pip install pyxmlsec 
$ python authrequest.py 
<Auth txn="" ac="public" xmlns="http://www.uidai.gov.in/authentication/uid-auth-request/1.0" ver="1.5" uid="123412341234" tid="" sa="public">
  <Skey ci="23233">ZWhoc2tz</Skey>
  <Uses pfa="n" bio="n" pin="n" pa="n" otp="n" pi="y"/>
  <Data>ZGZkc2ZkZmRz</Data>
</Auth>

The XML generated is XSD compliant
Validating this incoming XML
<?xml version="1.0"?> 
<Auth xmlns="http://www.uidai.gov.in/authentication/uid-auth-request/1.0" 
      ver="1.5" tid="public" ac="public" sa="public" 
      lk="MKg8njN6O+QRUmYF+TrbBUCqlrCnbN/Ns6hYbnnaOk99e5UGNhhE/xQ=" uid="999999990019" 
      txn="GEO.11051880"> 
      <Skey ci="20131003">Nc6DrZKFk1oQXxfgnFUl0mmtYYIPl0RGaFd2oINkpChU1++xdddMx6Dlbz6mEYs3 
            IyzChGjRXN5/al9r0runFX8LspTfMchwpxaaDIOyIUguBoYmPUqJDqTQcwey6Ntc 
            TJWFSgOvBg+omUkdbK/9GOQ5KWWrN+E0A9JN0IPU4IJqJZmsA6ETZlVoZteYtoMI 
            Ucv53qmxNPOEmJ3s4BC3ppHRRWRFMUp/eW7DFJ33W+uInZB6yekKE0dz8fYeo03w 
            2JUT1wlafL7aseb04nv5tNEbllHWafmbMpbv2pXKr+WPgytjrygt1LagGqF4a5Mr 
            /UTNwsy4m/YwlkWN0QcYVw== 
      </Skey> 
      <Uses otp="n" pin="n" bio="n" pa="n" pfa="n" pi="y" /> 
      <Data>YOn05vg5qMwElULpEmdiH0j6rM1XWcbQN0n+CFNQeazouCgjyPBH/a2SwbFgq/fF 
            CYUm+the8gQyYC36VO49NLcNcD7WdMhweoiDYgJoCX/t87Kbq/ABoAetfX7OLAck 
            /mHrTmw8tsfJgo4xGSzKZKr+pVn1O8dDHJjwgptySr7vp2Ntj6ogu6B905rsyTWw 
            73iMgoILDHf5soM3Pvde+/XW5rJD9AIPQGhHnKirwkiAgNIhtWU6ttYg4t6gHHbZ 
            0gVBwgjRzM3sDWKzK0EnmA== 
      </Data> 
      <Hmac>xy+JPoVN9dsWVm4YPZFwhVBKcUzzCTVvAxikT6BT5EcPgzX2JkLFDls+kLoNMpWe 
      </Hmac> 
</Auth> 

The XML generated is XSD compliant

$ python authresponse.py
<?xml version="1.0"?>
<AuthRes info="" txn="" code="-1" err="100" ts="2011-10-30T13:30:35" ret="n" xmlns="http://www.uidai.gov.in/authentication/uid-auth-response/1.0"/>

The XML generated is XSD compliant
Validating this incoming XML
<?xml version="1.0"?> 
<AuthRes  xmlns="http://www.uidai.gov.in/authentication/uid-auth-response/1.0"
	  ret="y" code="52" 
	  txn="322hfdjhsjkdhfjkds" err="100" info="" 
	  ts="2011-10-30T13:26:19"></AuthRes>

The XML generated is XSD compliant

$ python authrequest_signature.py fixtures/authrequest-with-sig.xml 
<?xml version="1.0"?>
<Auth xmlns="http://www.uidai.gov.in/authentication/uid-auth-request/1.0" ver="1.5" tid="public" ac="public" sa="public" lk="MKg8njN6O+QRUmYF+TrbBUCqlrCnbN/Ns6hYbnnaOk99e5UGNhhE/xQ=" uid="999999990019" txn="GEO.11051880"> 
....
R/l8w0hCInLusQMZeXgHcnxBGDSk1AQxKk5UfQmCwHNcRJMB5Zkj8+9n6T+/wx6D
tKDelktgIoo7w0EJ6MdVJ9Qzr5PJcYzX+ERgJEd/NNNVoPjFc2Al2odjToZdFN8+
/upJnBH02TRb1Wq63OtcuyBIFA==</X509Certificate>
</X509Data> 
            </KeyInfo> 
      </Signature> 
</Auth>

$ python authrequest_signature.py fixtures/authrequest-with-sig.xml  > new-authrequest-with-sig.xml
$ xmlsec --verify --pkcs12 fixtures/public.p12 --pwd public new-authrequest-with-sig.xml
func=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=360:obj=x509-store:subj=X509_verify_cert:error=4:crypto library function failed:subj=/C=IN/ST=KA/L=Bangalore/O=Public AUA/OU=Public/CN=Public AUA;err=20;msg=unable to get local issuer certificate
func=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=360:obj=x509-store:subj=X509_verify_cert:error=4:crypto library function failed:subj=/C=IN/ST=KA/L=Bangalore/O=Public AUA/OU=Public/CN=Public AUA;err=20;msg=unable to get local issuer certificate
func=xmlSecOpenSSLX509StoreVerify:file=x509vfy.c:line=408:obj=x509-store:subj=unknown:error=71:certificate verification failed:err=20;msg=unable to get local issuer certificate
OK
SignedInfo References (ok/all): 1/1
Manifests References (ok/all): 0/0

[Notes: The above error refers to the lack of CA certificate.] 

$ python auth_crypt.py 
certificate expiry =  Jun 28 04:40:44 2012 GMT
Encryption payload:  39jsjsfdhdshfd
Encrypted base64 encoded data:
hm8IKZIubO49F3y2RiLhBlW1tG3lAWep4j9l8rQ/XO/0OHKj4s+iehkkUw6Ew5KGes/yWeo993SRYw4/4sGT+fSNqCGw0LCL7WGdDKxuuoTuW0qytdfQQCydPICo1/fyy6RNl9n/v4+4eaf3UWgfg3oFq3d4J4cSDqfHC4ToCeQ=
Decrypted data
39jsjsfdhdshfd
Encrytion payload and decrypted data matched

Notes
-----

1. XSD file parsing 

Right now the XSD file is read each time and a parser instantiated.
Only lxml seems to be working. Code generationg using generateDS and
pyxb are throwing different errors that require non-trivial debugging
effort. Workaround: The application can store the generated parser.

2. Signatures 

The XSD files do not automatically include the digital
signatures. They specify the message structure without the
dignature. The signature processing is pre/post processing step as
required.

Background
-----------
The basic requirement is to generate XML messages to be sent 
to the auth server and processing the received messages. This 
can be achieved in multiple ways: 

1. Write custom code to build the XML around the xml.domutils 
or lxml and use the XSD to validate the generated xml only. 

2. Build a XSD and use a class generator from that. This makes life
easier but it is lot more sensitive to the structure and evolution
of the XSD, and is intolerant of XSD-incompatible  messages from the 
server. There are three 'objectify' modules 
  (a) Gnosis Utils 
  (b) lxml 
  (c) generateDS 
  (d) pyxb 

3. Build a JSON eventually turn the JSON into XML. This has the
advantage that json handling is much easier. However the xml 
signatures might pose a problem (not sure).

